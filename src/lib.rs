use ncurses::*;

// Display a CHIP-8
pub fn display_chip8(ch8display: [[bool; 64]; 32]) {
    init_pair(1, COLOR_WHITE, COLOR_WHITE); // Create white color
    init_pair(2, COLOR_BLACK, COLOR_BLACK); // Create black color
    let mut x: usize;
    for (y, row) in ch8display.iter().enumerate() {
        x = 0;
        for pix in row.iter() {
            let color_pair = if *pix { 1 } else { 2 };
            attron(COLOR_PAIR(color_pair));
            mvaddstr(y as i32, x as i32, "AA");
            attroff(COLOR_PAIR(color_pair));
            x += 2;
        }
    }
    refresh();
}

pub fn get_default_font() -> Vec<u8> {
    [
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    ].to_vec()
}
